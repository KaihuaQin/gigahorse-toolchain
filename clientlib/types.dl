.type Type <: symbol

.decl Type_Kind(type: Type, kind: symbol)

.decl Type_Width(type: Type, width: number)
DEBUG_OUTPUT(Type_Width)

Type_Kind("bool", "bool").
Type_Width("bool", 1).
Type_Kind("address", "uint").
Type_Width("address", 20).

Type_Kind(type, "uint"),
Type_Width(type, byteWidth):-
  byteWidth = range(1, 33),
  type = cat("uint", to_string(byteWidth*8)).

Type_Kind(type, "int"),
Type_Width(type, byteWidth):-
  byteWidth = range(1, 33),
  type = cat("int", to_string(byteWidth*8)).

Type_Kind(type, "bytes"),
Type_Width(type, byteWidth):-
  byteWidth = range(1, 33),
  type = cat("bytes", to_string(byteWidth)).

.decl RevertCastToType(originVar: Variable, checkBlock: Block, type: Type)
DEBUG_OUTPUT(RevertCastToType)

.decl VarEqualToCastedTo(originVar: Variable, eqRes: Variable, type: Type)
DEBUG_OUTPUT(VarEqualToCastedTo)

.decl VarNotEqualToCastedTo(originVar: Variable, notEqRes: Variable, type: Type)
DEBUG_OUTPUT(VarNotEqualToCastedTo)

.decl CastToType(castStmt: Statement, originVar: Variable, castedVar: Variable, type: Type)
DEBUG_OUTPUT(CastToType)

CastToType(castStmt, originVar, castedVar, cat("uint", to_string(width*8))):-
  LowBytesMaskOp(originVar, castedVar, width),
  Statement_Defines(castStmt, castedVar, 0),
  width != 20,
  !SignedIntCast(originVar, castedVar, width),
  !BooleanCast(originVar, castedVar).

CastToType(castStmt, originVar, castedVar, "address"):-
  LowBytesMaskOp(originVar, castedVar, 20),
  Statement_Defines(castStmt, castedVar, 0).

CastToType(castStmt, originVar, castedVar, cat("int", to_string(width*8))):-
  SignedIntCast(originVar, castedVar, width),
  Statement_Defines(castStmt, castedVar, 0).

CastToType(castStmt, originVar, castedVar, "bool"):-
  BooleanCast(originVar, castedVar),
  Statement_Defines(castStmt, castedVar, 0).

CastToType(castStmt, originVar, castedVar, cat("bytes", to_string(width))):-
  HighBytesMaskOp(originVar, castedVar, width),
  Statement_Defines(castStmt, castedVar, 0).

VarEqualToCastedTo(originVar, eqRes, type):-
  CastToType(_, originVar, castedVar, type),
  EQ(_, originVar, castedVar, eqRes).

VarNotEqualToCastedTo(originVar, notEqRes, type):-
  CastToType(_, originVar, castedVar, type),
  SUB(_, originVar, castedVar, notEqRes).

VarEqualToCastedTo(originVar, eqRes, type):-
  VarNotEqualToCastedTo(originVar, notEqRes, type),
  ISZERO(_, notEqRes, eqRes).

VarNotEqualToCastedTo(originVar, notEqRes, type):-
  VarEqualToCastedTo(originVar, eqRes, type),
  ISZERO(_, eqRes, notEqRes).

RevertCastToType(originVar, checkBlock, type):-
  VarNotEqualToCastedTo(originVar, notEqRes, type),
  JUMPI(jumpi, _, notEqRes),
  Statement_Block(jumpi, checkBlock),
  LocalBlockEdge(checkBlock, revertBlock),
  ThrowBlock(revertBlock),
  !FallthroughEdge(checkBlock, revertBlock).

RevertCastToType(originVar, checkBlock, type):-
  VarEqualToCastedTo(originVar, notEqRes, type),
  JUMPI(jumpi, _, notEqRes),
  Statement_Block(jumpi, checkBlock),
  FallthroughEdge(checkBlock, revertBlock),
  ThrowBlock(revertBlock).

// This rule can be made more precise by ensuring
RevertCastToType(actual, callerBlock, type):-
  RevertCastToType(formal, _, type),
  FormalArgs(function, formal, i),
  CallGraphEdge(callerBlock, function),
  ActualArgs(callerBlock, actual, i).


.decl HighLevelVariable(var: Variable)
DEBUG_OUTPUT(HighLevelVariable)

.decl HighLevelVariable_Type(var: Variable, type: Type)
DEBUG_OUTPUT(HighLevelVariable_Type)

HighLevelVariable(var):-
  PublicFunctionArg(_, var, _), !PublicFunctionArrayArg(_, var, _).

HighLevelVariable(var):-
  FormalArgs(_, var, _).

HighLevelVariable(var):-
  ExternalCall_ActualReturn(_, var, _).

// TempStmt(tail),
HighLevelVariable_Type(var, type):-
  HighLevelVariable(var),
  RevertCastToType(var, _, type).

// Variable is of a type if every time it's used it's a cast to the same type
HighLevelVariable_Type(var, type):-
  HighLevelVariable(var),
  CastToType(_, var, _, type),
  uses = count : Statement_Uses(_, var, _),
  uses = count : CastToType(_, var, _, type).


/**
  Unused right now.
*/
.decl Var_Type(addrVar: Variable, type: symbol)
DEBUG_OUTPUT(Var_Type)

Var_Type(addr, "address"):-
  CALL(_, _, addr, _, _, _, _, _, _);
  STATICCALL(_, _, addr, _, _, _, _, _);
  DELEGATECALL(_, _, addr, _, _, _, _, _);
  SELFDESTRUCT(_, addr);
  EXTCODECOPY(_, addr, _, _, _);
  EXTCODESIZE(_, addr, _);
  EXTCODEHASH(_, addr, _);
  BALANCE(_, addr, _);
  CALLER(_, addr);
  ORIGIN(_, addr);
  ADDRESS(_, addr).

Var_Type(var, "uint256"):-
  GAS(_, var);
  CALLVALUE(_, var);
  TIMESTAMP(_, var);
  DIFFICULTY(_, var);
  NUMBER(_, var);
  BALANCE(_, _, var).

Var_Type(var, "bytes32"):-
  BLOCKHASH(_, _, var);
  EXTCODEHASH(_, _, var).